generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Amenity {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(100)
  category        CategoryType
  createdAt       DateTime?         @default(now()) @db.Timestamp(6)
  HotelAmenity    HotelAmenity[]
  RoomTypeAmenity RoomTypeAmenity[]

  @@unique([name, category])
}

model Coupon {
  id                            Int           @id @default(autoincrement())
  title                         String        @db.VarChar(100)
  description                   String        @db.VarChar(255)
  code                          String        @db.VarChar(50)
  amount                        Int
  percentage                    Float?        @default(0) @db.Real
  available                     Int?          @default(0)
  createdById                   Int?
  deletedAt                     DateTime?     @db.Timestamp(6)
  createdAt                     DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt                     DateTime?     @default(now()) @db.Timestamp(6)
  User_Coupon_createdByIdToUser User?         @relation("Coupon_createdByIdToUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order                         Order[]
}

model Customer {
  id          Int       @id @default(autoincrement())
  fullName    String    @db.VarChar(255)
  phoneNumber String    @db.VarChar(20)
  email       String    @db.VarChar(255)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  Order       Order?
}

model Device {
  id           Int            @id @default(autoincrement())
  userId       Int
  userAgent    String
  browser      String?        @db.VarChar(50)
  os           String?        @db.VarChar(50)
  deviceType   String?        @db.VarChar(50)
  isActive     Boolean?       @default(true)
  lastActive   DateTime?      @default(now()) @db.Timestamp(6)
  createdAt    DateTime?      @default(now()) @db.Timestamp(6)
  User         User           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  RefreshToken RefreshToken[]

  @@unique([userId, userAgent])
}

model Hotel {
  id               Int            @id @default(autoincrement())
  partnerId        Int            @unique
  name             String         @db.VarChar(255)
  hotelPhoneNumber String         @db.VarChar(20)
  type             HotelType
  reputationScore  Float?         @default(100) @db.Real
  rating           Float?         @default(0) @db.Real
  vat              Float          @db.Real
  address          String
  provinceCode     Int
  districtCode     Int
  wardCode         Int
  description      String
  images           String[]
  status           HotelStatus?   @default(PENDING)
  createdAt        DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?      @default(now()) @db.Timestamp(6)
  partner          Partner        @relation(fields: [partnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hotelAmenity     HotelAmenity[]
  order            Order[]
  review           Review[]
  room             Room[]
  roomType         RoomType[]
  wishlist         Wishlist[]
}

model HotelAmenity {
  id        Int     @id @default(autoincrement())
  hotelId   Int
  amenityId Int
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hotel     Hotel   @relation(fields: [hotelId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([hotelId, amenityId])
}

model Notify {
  id                            Int        @id @default(autoincrement())
  recipientId                   Int?
  title                         String     @db.VarChar(100)
  message                       String
  createdById                   Int?
  readAt                        DateTime?  @db.Timestamp(6)
  createdAt                     DateTime?  @default(now()) @db.Timestamp(6)
  User_Notify_createdByIdToUser User?      @relation("Notify_createdByIdToUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Notify_recipientIdToUser User?      @relation("Notify_recipientIdToUser", fields: [recipientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Order {
  id               Int          @id @default(autoincrement())
  userId           Int
  customerId       Int          @unique
  hotelId          Int
  roomId           Int
  quantity         Int
  checkinDate      DateTime     @db.Date
  checkoutDate     DateTime     @db.Date
  basePrice        Int       
  pointDiscount    Int        @default(0)
  couponId         Int?
  couponAmount     Int        @default(0)
  promotionId      Int?
  promotionAmount  Int        @default(0)
  vatAmount        Int       
  serviceFeeAmount Int       
  totalPrice       Int       
  platformProfit   Int       @default(0)
  partnerProfit    Int       @default(0)
  status           OrderStatus? @default(PENDING)
  paymentType      PaymentType
  arrivalTime      DateTime?    @db.Timestamp(6)
  reason           String?      @db.VarChar(255)
  checkoutTime     DateTime?    @db.Timestamp(6)
  createdAt        DateTime?    @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?    @default(now()) @db.Timestamp(6)
  coupon           Coupon?      @relation(fields: [couponId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer         Customer     @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  promotion        Promotion?   @relation(fields: [promotionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hotel            Hotel        @relation(fields: [hotelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  room             Room         @relation(fields: [roomId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  review           Review?
  refund           Refund?
}

model Partner {
  id             Int            @id @default(autoincrement())
  userId         Int            @unique
  fullName       String         @db.VarChar(255)
  email          String         @unique @db.VarChar(255)
  phoneNumber    String         @db.VarChar(20)
  idCard         String         @unique @db.VarChar(50)
  birthday       DateTime       @db.Date
  gender         String         @db.VarChar(10)
  address        String
  provinceCode   Int
  districtCode   Int
  wardCode       Int
  companyName    String         @db.VarChar(255)
  accountNumber  String         @db.VarChar(100)
  bankAccount    String         @db.VarChar(100)
  bankName       String         @db.VarChar(255)
  commissionRate Float?         @default(0.15) @db.Real
  status         PartnerStatus? @default(PENDING)
  createdById    Int?
  createdAt      DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt      DateTime?      @default(now()) @db.Timestamp(6)
  hotel          Hotel?
  user           User           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Permission {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(255)
  description      String?
  path             String             @db.VarChar(255)
  method           HTTPMethod
  createdAt        DateTime?          @default(now()) @db.Timestamp(6)
  PermissionToRole PermissionToRole[]
}

model PermissionToRole {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Promotion {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(100)
  percentage      Float?    @default(0) @db.Real
  sharePercentage Float?    @default(0) @db.Real
  validFrom       DateTime  @db.Date
  validUntil      DateTime  @db.Date
  createdById     Int
  deletedAt       DateTime? @db.Timestamp(6)
  notifiedAt      DateTime? @db.Timestamp(6)
  createdAt       DateTime? @default(now()) @db.Timestamp(6)
  updatedAt       DateTime? @default(now()) @db.Timestamp(6)
  order           Order[]
  user            User      @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model RefreshToken {
  token     String    @id @db.VarChar(255)
  userId    Int
  deviceId  Int
  expiresAt DateTime  @db.Timestamp(6)
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  device    Device    @relation(fields: [deviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Refund {
  id          Int           @id @default(autoincrement())
  orderId     Int           @unique
  amount      Int         
  reason      String        @db.VarChar(255)
  status      RefundStatus? @default(PENDING)
  createdById Int
  createdAt   DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime?     @default(now()) @db.Timestamp(6)
  user        User          @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order       Order         @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Review {
  id        Int       @id @default(autoincrement())
  orderId   Int       @unique
  hotelId   Int
  userId    Int
  title     String    @db.VarChar(100)
  content   String    @db.VarChar(255)
  rating    Int
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  Hotel     Hotel     @relation(fields: [hotelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Order     Order     @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Role {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(50)
  description      String?
  createdAt        DateTime?          @default(now()) @db.Timestamp(6)
  PermissionToRole PermissionToRole[]
  User             User[]
}

model Room {
  id               Int                @id @default(autoincrement())
  hotelId          Int
  roomTypeId       Int
  price            Int              
  quantity         Int
  rangeLimitDate   Int?               @default(0)
  policy           PolicyType?        @default(NON_REFUNDABLE)
  notePolicy       String?
  deletedAt        DateTime?          @db.Timestamp(6)
  createdAt        DateTime?          @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?          @default(now()) @db.Timestamp(6)
  order            Order[]
  hotel            Hotel              @relation(fields: [hotelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roomType         RoomType           @relation(fields: [roomTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roomAvailability RoomAvailability[]
}

model RoomAvailability {
  id             Int       @id @default(autoincrement())
  roomId         Int
  availableRooms Int
  totalRooms     Int       @default(0)
  version        Int?      @default(0)
  createdAt      DateTime? @default(now()) @db.Date
  room           Room      @relation(fields: [roomId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@unique([roomId, createdAt])
}

model RoomBed {
  id          Int         @id @default(autoincrement())
  roomTypeId  Int
  roomBedType RoomBedType
  quantity    Int
  createdAt   DateTime?   @default(now()) @db.Timestamp(6)
  RoomType    RoomType    @relation(fields: [roomTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}


model RoomType {
  id              Int               @id @default(autoincrement())
  hotelId         Int
  type            String            @db.VarChar(100)
  adults          Int
  child           Int?              @default(0)
  area            Int
  serviceFeeRate  Float             @db.Real
  description     String
  images          String[]
  deletedAt       DateTime?         @db.Timestamp(6)
  createdAt       DateTime?         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime?         @default(now()) @db.Timestamp(6)
  room            Room[]
  roomBed         RoomBed[]
  hotel           Hotel             @relation(fields: [hotelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roomTypeAmenity RoomTypeAmenity[]
}

model RoomTypeAmenity {
  id         Int      @id @default(autoincrement())
  roomTypeId Int
  amenityId  Int
  amenity    Amenity  @relation(fields: [amenityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roomType   RoomType @relation(fields: [roomTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([roomTypeId, amenityId])
}

model Transaction {
  id                 Int             @id @default(autoincrement())
  gateway            String          @db.VarChar(100)
  transactionDate    DateTime?       @default(now()) @db.Timestamp(6)
  accountNumber      String?         @db.VarChar(100)
  subAccount         String?         @db.VarChar(255)
  amount             Int?            @default(0)
  type               TransactionType
  accumulated        Int?
  code               String?         @db.VarChar(255)
  transactionContent String?
  referenceNumber    String?         @db.VarChar(255)
  body               String?
  createdAt          DateTime?       @default(now()) @db.Timestamp(6)
}

model User {
  id                              Int            @id @default(autoincrement())
  email                           String         @unique @db.VarChar(255)
  password                        String         @db.VarChar(255)
  fullName                        String?        @db.VarChar(255)
  phoneNumber                     String?        @db.VarChar(20)
  avatar                          String?
  totpSecret                      String?        @db.VarChar(255)
  uriSecret                       String?        @db.VarChar(255)
  address                         String?
  gender                          String?        @db.VarChar(10)
  birthday                        DateTime?      @db.Date
  earnPoint                       Float?         @default(0) @db.Real
  accountNumber                   String?        @db.VarChar(100)
  bankAccount                     String?        @db.VarChar(100)
  bankName                        String?        @db.VarChar(255)
  roleId                          Int
  status                          UserStatus?    @default(ACTIVE)
  createdAt                       DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                       DateTime?      @default(now()) @db.Timestamp(6)
  Coupon_Coupon_createdByIdToUser Coupon[]       @relation("Coupon_createdByIdToUser")
  Device                          Device[]
  Notify_Notify_createdByIdToUser Notify[]       @relation("Notify_createdByIdToUser")
  Notify_Notify_recipientIdToUser Notify[]       @relation("Notify_recipientIdToUser")
  order                           Order[]
  partner                         Partner?
  promotion                       Promotion[]
  refreshToken                    RefreshToken[]
  refund                          Refund[]
  review                          Review[]
  role                            Role           @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wishlist                        Wishlist[]
}

model VerificationCode {
  id        Int                  @id @default(autoincrement())
  email     String               @db.VarChar(255)
  code      String               @db.VarChar(10)
  type      VerificationCodeType
  expiresAt DateTime             @db.Timestamp(6)
  createdAt DateTime?            @default(now()) @db.Timestamp(6)

  @@unique([email, type])
  @@index([expiresAt])
}

model Wishlist {
  id      Int   @id @default(autoincrement())
  userId  Int
  hotelId Int
  hotel   Hotel @relation(fields: [hotelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user    User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, hotelId])
}

enum CategoryType {
  ROOM
  PUBLIC
  SERVICE
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum HotelStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum HotelType {
  HOTEL
  HOSTEL
  APARTMENT
  GUESTHOUSE
  HOME_STAY
  VILLA
  RESORT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELED
  PENDING_REFUND
  REFUNDED
  CHECKOUT
  NO_SHOW
}

enum PartnerStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentType {
  BANKING
  PAY_AT_HOTEL
}

enum PolicyType {
  NON_REFUNDABLE
  FREE_CANCELLATION
  PAY_AT_HOTEL
}

enum RefundStatus {
  PENDING
  COMPLETED
}

enum RoomBedType {
  KING
  QUEEN
  DOUBLE
  TWIN
  SINGLE
  BUNK
}

enum TransactionType {
  IN
  OUT
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  VERIFY
}
